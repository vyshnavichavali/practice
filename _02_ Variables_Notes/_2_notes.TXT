>>> x = 10
>>> type(x)
<class 'int'>
>>> x = 10.4
>>> type(x)
<class 'float'>
>>>
>>> x = True
>>> type(x)
<class 'bool'>
>>> a = b = c = 10
>>> print(a)
10
>>> print(b)
10
>>> print(c)
10
>>> a, b, c = 10, 20, 30
>>> a
10
>>> b
20
>>> c
30
>>>
>>> and = 10
  File "<stdin>", line 1
    and = 10
    ^
SyntaxError: invalid syntax
>>> True = 10
  File "<stdin>", line 1
    True = 10
    ^
SyntaxError: cannot assign to True
>>> And = 10
>>> print(And)
10
>>> x = 10
>>> X = 20
>>> x,X
(10, 20)
>>> sal = 1000
>>> Sal = 1000
>>> except = 'Madhu'
  File "<stdin>", line 1
    except = 'Madhu'
    ^
SyntaxError: invalid syntax
>>> exceptt = 'Madhu'
>>>
>>> _name = 'Madhu'
>>> _123 = 10000
>>> 123 = 1000
  File "<stdin>", line 1
    123 = 1000
    ^
SyntaxError: cannot assign to literal

>>> a = b = c = 10
>>> # two or more variables can refer to same value
>>> print(a,b,c)
10 10 10
>>> id(a), id(b), id(c)
(1891180046928, 1891180046928, 1891180046928)
>>> del c
>>> # c to 10 : dereferencing will happen
>>> del b
>>> print(b,c)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'b' is not defined
>>> print(a)
10
>>> del a
>>> # now 10 has 0 references. It is eligible for garbage collection.
>>>
>>>
>>> x = 10
>>> print(x, id(x))
10 1891180046928
>>> x = 20
>>> print(x, id(x))
20 1891180047248
>>> # Now 10 has 0 references. It will be garbage collected
>>>
>>>
>>> x = 10
>>> print(x, id(x))
10 1891180046928
>>> y = 10
>>> print(y, id(x))
10 1891180046928
>>> # If value already exists, it will give same addr to new variable
>>>
>>> x = 10
>>> print(x, id(x))
10 1891180046928
>>> x = x + 5
>>> print(x, id(x))
15 1891180047088
>>> # Dereferencing will happen to 10, which will be garbage collected
>>>